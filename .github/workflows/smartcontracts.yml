name: Smartcontracts

on: 
  workflow_dispatch:
  # Inputs the workflow accepts.
    inputs:
      SPOKE_PARAMS:
        description: 'Json with parameters for spoke deploy'
        required: true
        type: string
      HM_TOKEN_ADDRESS:
        # description: 'HM Token Address'
        required: true
        type: string
      TIMELOCK:
        description: "Transfer governance ownership to timelock"
        required: true
        type: boolean
        default: false
      TEST:
        description: "Run tests"
        required: true
        type: boolean
        default: true

defaults:
  run:
    working-directory: smartcontracts

env:
  FOUNDRY_PROFILE: ci
  # user data
  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
  HUB_RPC_URL: ${{ vars.HUB_RPC_URL }}
  # HUB_VOTE_TOKEN_ADDRESS: ${{ vars.HUB_VOTE_TOKEN_ADDRESS }}
  HUB_ETHERSCAN_API_KEY: ${{ secrets.HUB_ETHERSCAN_API_KEY }}
  MAGISTRATE_ADDRESS: ${{ vars.MAGISTRATE_ADDRESS }}
  # hub 
  HUB_AUTOMATIC_RELAYER_ADDRESS: ${{ vars.HUB_AUTOMATIC_RELAYER_ADDRESS }}
  HUB_WORMHOLE_CHAIN_ID: ${{ vars.HUB_WORMHOLE_CHAIN_ID }}
  HUB_CHAIN_ID: ${{ vars.HUB_CHAIN_ID }}
  VOTE_TOKEN_ADDRESS: ${{ vars.VOTE_TOKEN_ADDRESS }}
  HUB_HM_TOKEN_ADDRESS: ${{ vars.HUB_HM_TOKEN_ADDRESS }}
  HUB_SECONDS_PER_BLOCK: ${{ vars.HUB_SECONDS_PER_BLOCK }}
  TIMELOCK: ${{ inputs.TIMELOCK }}
  # spoke deployment
  SPOKE_PARAMS: ${{ inputs.SPOKE_PARAMS }}


jobs:
  check:
    strategy:
      fail-fast: true

    name: Foundry project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install hardhat
        if: ${{ inputs.TEST }}
        run: |
          npm install hardhat

      - name: Vote token deployment
        run: |
          forge script script/VHMTDeployment.s.sol:VHMTDeployment --rpc-url $HUB_RPC_URL --etherscan-api-key $HUB_ETHERSCAN_API_KEY --broadcast --verify
          HUB_VOTE_TOKEN_ADDRESS="$(cat "broadcast/VHMTDeployment.s.sol/$HUB_CHAIN_ID/run-latest.json" | jq -r '.transactions[0].contractAddress')"
          echo "HUB_VOTE_TOKEN_ADDRESS=$HUB_VOTE_TOKEN_ADDRESS" >> "$GITHUB_ENV"

      - name: Deploying Hub contract
        run: |
          forge script script/HubDeployment.s.sol:HubDeployment --rpc-url $HUB_RPC_URL --etherscan-api-key $HUB_ETHERSCAN_API_KEY --broadcast --verify
          TIMELOCK_ADDRESS="$(cat "broadcast/HubDeployment.s.sol/$HUB_CHAIN_ID/run-latest.json" | jq -r '.transactions[0].contractAddress')"
          GOVERNOR_ADDRESS="$(cat "broadcast/HubDeployment.s.sol/$HUB_CHAIN_ID/run-latest.json" | jq -r '.transactions[1].contractAddress')"
          echo "TIMELOCK_ADDRESS=$TIMELOCK_ADDRESS" >> "$GITHUB_ENV"
          echo "GOVERNOR_ADDRESS=$GOVERNOR_ADDRESS" >> "$GITHUB_ENV"
          
      - name: Run Test
        if: ${{ inputs.TEST }}
        run: |
          npx hardhat test

      - name: Deploy contracts
        run: ./deploy.sh

      # store output jsons as artifact, for download see https://docs.github.com/en/rest/actions/artifacts?apiVersion=2022-11-28#download-an-artifact
      - uses: actions/upload-artifact@v3
        with:
          name: run-latest
          path: |
            broadcast/

